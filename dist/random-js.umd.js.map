{"version":3,"file":"random-js.umd.js","sources":["../src/utils/constants.ts","../src/distribution/int32.ts","../src/utils/add.ts","../src/distribution/int53.ts","../src/distribution/int53Full.ts","../src/distribution/uint32.ts","../src/distribution/uint53.ts","../src/distribution/uint53Full.ts","../src/distribution/integer.ts","../src/distribution/bool.ts","../src/distribution/date.ts","../src/distribution/die.ts","../src/distribution/dice.ts","../src/distribution/string.ts","../src/distribution/hex.ts","../src/utils/convertSliceArgument.ts","../src/utils/toInteger.ts","../src/distribution/pick.ts","../src/utils/multiply.ts","../src/distribution/realZeroToOneExclusive.ts","../src/distribution/realZeroToOneInclusive.ts","../src/distribution/real.ts","../src/utils/sliceArray.ts","../src/distribution/shuffle.ts","../src/distribution/sample.ts","../src/utils/stringRepeat.ts","../src/distribution/uuid4.ts","../src/engine/nativeMath.ts","../src/Random.ts","../src/utils/Int32Array.ts","../src/engine/browserCrypto.ts","../src/utils/createEntropy.ts","../src/utils/imul.ts","../src/engine/MersenneTwister19937.ts","../src/engine/nodeCrypto.ts","../src/distribution/picker.ts"],"sourcesContent":["export const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\r\nexport const LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\r\nexport const UINT32_MAX = -1 >>> 0;\r\nexport const UINT32_SIZE = UINT32_MAX + 1;\r\nexport const INT32_SIZE = UINT32_SIZE / 2;\r\nexport const INT32_MAX = INT32_SIZE - 1;\r\nexport const UINT21_SIZE = 1 << 21;\r\nexport const UINT21_MAX = UINT21_SIZE - 1;\r\n","import { Engine } from \"../types\";\r\n\r\n/**\r\n * Returns a value within [-0x80000000, 0x7fffffff]\r\n */\r\nexport function int32(engine: Engine): number {\r\n  return engine.next() | 0;\r\n}\r\n","import { Distribution } from \"../types\";\r\n\r\nexport function add(distribution: Distribution, addend: number): Distribution {\r\n  if (addend === 0) {\r\n    return distribution;\r\n  } else {\r\n    return engine => distribution(engine) + addend;\r\n  }\r\n}\r\n","import { Engine } from \"../types\";\r\nimport {\r\n  SMALLEST_UNSAFE_INTEGER,\r\n  UINT21_MAX,\r\n  UINT21_SIZE,\r\n  UINT32_SIZE\r\n} from \"../utils/constants\";\r\n\r\n/**\r\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n */\r\nexport function int53(engine: Engine): number {\r\n  const high = engine.next() | 0;\r\n  const low = engine.next() >>> 0;\r\n  return (\r\n    (high & UINT21_MAX) * UINT32_SIZE +\r\n    low +\r\n    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\r\n  );\r\n}\r\n","import { Engine } from \"../types\";\r\nimport {\r\n  SMALLEST_UNSAFE_INTEGER,\r\n  UINT21_MAX,\r\n  UINT21_SIZE,\r\n  UINT32_SIZE\r\n} from \"../utils/constants\";\r\n\r\n/**\r\n * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n */\r\nexport function int53Full(engine: Engine): number {\r\n  while (true) {\r\n    const high = engine.next() | 0;\r\n    if (high & 0x400000) {\r\n      if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\r\n        return SMALLEST_UNSAFE_INTEGER;\r\n      }\r\n    } else {\r\n      const low = engine.next() >>> 0;\r\n      return (\r\n        (high & UINT21_MAX) * UINT32_SIZE +\r\n        low +\r\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Engine } from \"../types\";\r\n\r\n/**\r\n * Returns a value within [0, 0xffffffff]\r\n */\r\nexport function uint32(engine: Engine): number {\r\n  return engine.next() >>> 0;\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { UINT21_MAX, UINT32_SIZE } from \"../utils/constants\";\r\n\r\n/**\r\n * Returns a value within [0, 0x1fffffffffffff]\r\n */\r\nexport function uint53(engine: Engine): number {\r\n  const high = engine.next() & UINT21_MAX;\r\n  const low = engine.next() >>> 0;\r\n  return high * UINT32_SIZE + low;\r\n}\r\n","import { Engine } from \"../types\";\r\nimport {\r\n  SMALLEST_UNSAFE_INTEGER,\r\n  UINT21_MAX,\r\n  UINT21_SIZE,\r\n  UINT32_SIZE\r\n} from \"../utils/constants\";\r\n\r\n/**\r\n * Returns a value within [0, 0x20000000000000]\r\n */\r\nexport function uint53Full(engine: Engine): number {\r\n  while (true) {\r\n    const high = engine.next() | 0;\r\n    if (high & UINT21_SIZE) {\r\n      if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\r\n        return SMALLEST_UNSAFE_INTEGER;\r\n      }\r\n    } else {\r\n      const low = engine.next() >>> 0;\r\n      return (high & UINT21_MAX) * UINT32_SIZE + low;\r\n    }\r\n  }\r\n}\r\n","import { Distribution, Engine } from \"../types\";\r\nimport { add } from \"../utils/add\";\r\nimport {\r\n  INT32_SIZE,\r\n  LARGEST_SAFE_INTEGER,\r\n  SMALLEST_UNSAFE_INTEGER,\r\n  UINT21_MAX,\r\n  UINT21_SIZE,\r\n  UINT32_MAX,\r\n  UINT32_SIZE\r\n} from \"../utils/constants\";\r\nimport { int32 } from \"./int32\";\r\nimport { int53 } from \"./int53\";\r\nimport { int53Full } from \"./int53Full\";\r\nimport { uint32 } from \"./uint32\";\r\nimport { uint53 } from \"./uint53\";\r\nimport { uint53Full } from \"./uint53Full\";\r\n\r\nfunction isPowerOfTwoMinusOne(value: number): boolean {\r\n  return ((value + 1) & value) === 0;\r\n}\r\n\r\nfunction bitmask(masking: number): Distribution {\r\n  return (engine: Engine) => engine.next() & masking;\r\n}\r\n\r\nfunction downscaleToLoopCheckedRange(range: number): Distribution {\r\n  const extendedRange = range + 1;\r\n  const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\r\n  return engine => {\r\n    let value = 0;\r\n    do {\r\n      value = engine.next() >>> 0;\r\n    } while (value >= maximum);\r\n    return value % extendedRange;\r\n  };\r\n}\r\n\r\nfunction downscaleToRange(range: number): Distribution {\r\n  if (isPowerOfTwoMinusOne(range)) {\r\n    return bitmask(range);\r\n  } else {\r\n    return downscaleToLoopCheckedRange(range);\r\n  }\r\n}\r\n\r\nfunction isEvenlyDivisibleByMaxInt32(value: number): boolean {\r\n  return (value | 0) === 0;\r\n}\r\n\r\nfunction upscaleWithHighMasking(masking: number): Distribution {\r\n  return engine => {\r\n    const high = engine.next() & masking;\r\n    const low = engine.next() >>> 0;\r\n    return high * UINT32_SIZE + low;\r\n  };\r\n}\r\n\r\nfunction upscaleToLoopCheckedRange(extendedRange: number): Distribution {\r\n  const maximum =\r\n    extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\r\n  return engine => {\r\n    let ret = 0;\r\n    do {\r\n      const high = engine.next() & UINT21_MAX;\r\n      const low = engine.next() >>> 0;\r\n      ret = high * UINT32_SIZE + low;\r\n    } while (ret >= maximum);\r\n    return ret % extendedRange;\r\n  };\r\n}\r\n\r\nfunction upscaleWithinU53(range: number): Distribution {\r\n  const extendedRange = range + 1;\r\n  if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\r\n    const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\r\n    if (isPowerOfTwoMinusOne(highRange)) {\r\n      return upscaleWithHighMasking(highRange);\r\n    }\r\n  }\r\n  return upscaleToLoopCheckedRange(extendedRange);\r\n}\r\n\r\nfunction upscaleWithinI53AndLoopCheck(min: number, max: number): Distribution {\r\n  return engine => {\r\n    let ret = 0;\r\n    do {\r\n      const high = engine.next() | 0;\r\n      const low = engine.next() >>> 0;\r\n      ret =\r\n        (high & UINT21_MAX) * UINT32_SIZE +\r\n        low +\r\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\r\n    } while (ret < min || ret > max);\r\n    return ret;\r\n  };\r\n}\r\n\r\n/**\r\n * Returns a Distribution to return a value within [min, max]\r\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n */\r\nexport function integer(min: number, max: number): Distribution {\r\n  min = Math.floor(min);\r\n  max = Math.floor(max);\r\n  if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\r\n    throw new RangeError(\r\n      `Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`\r\n    );\r\n  } else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\r\n    throw new RangeError(\r\n      `Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`\r\n    );\r\n  }\r\n\r\n  const range = max - min;\r\n  if (range <= 0 || !isFinite(range)) {\r\n    return () => min;\r\n  } else if (range === UINT32_MAX) {\r\n    if (min === 0) {\r\n      return uint32;\r\n    } else {\r\n      return add(int32, min + INT32_SIZE);\r\n    }\r\n  } else if (range < UINT32_MAX) {\r\n    return add(downscaleToRange(range), min);\r\n  } else if (range === LARGEST_SAFE_INTEGER) {\r\n    return add(uint53, min);\r\n  } else if (range < LARGEST_SAFE_INTEGER) {\r\n    return add(upscaleWithinU53(range), min);\r\n  } else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\r\n    return add(uint53Full, min);\r\n  } else if (\r\n    min === -SMALLEST_UNSAFE_INTEGER &&\r\n    max === SMALLEST_UNSAFE_INTEGER\r\n  ) {\r\n    return int53Full;\r\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\r\n    return int53;\r\n  } else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\r\n    return add(int53, 1);\r\n  } else if (max === SMALLEST_UNSAFE_INTEGER) {\r\n    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\r\n  } else {\r\n    return upscaleWithinI53AndLoopCheck(min, max);\r\n  }\r\n}\r\n","import { Distribution, Engine } from \"../types\";\r\nimport { INT32_SIZE, SMALLEST_UNSAFE_INTEGER, UINT32_SIZE } from \"../utils/constants\";\r\nimport { int32 } from \"./int32\";\r\nimport { integer } from \"./integer\";\r\nimport { uint53 } from \"./uint53\";\r\n\r\nfunction isLeastBitTrue(engine: Engine) {\r\n  return (engine.next() & 1) === 1;\r\n}\r\n\r\nfunction lessThan(\r\n  distribution: Distribution,\r\n  value: number\r\n): Distribution<boolean> {\r\n  return engine => distribution(engine) < value;\r\n}\r\n\r\nfunction probability(percentage: number) {\r\n  if (percentage <= 0) {\r\n    return () => false;\r\n  } else if (percentage >= 1) {\r\n    return () => true;\r\n  } else {\r\n    const scaled = percentage * UINT32_SIZE;\r\n    if (scaled % 1 === 0) {\r\n      return lessThan(int32, (scaled - INT32_SIZE) | 0);\r\n    } else {\r\n      return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\r\n    }\r\n  }\r\n}\r\n\r\n// tslint:disable:unified-signatures\r\n\r\n/**\r\n * Returns a boolean Distribution with 50% probability of being true or false\r\n */\r\nexport function bool(): Distribution<boolean>;\r\n/**\r\n * Returns a boolean Distribution with the provided `percentage` of being true\r\n * @param percentage A number within [0, 1] of how often the result should be `true`\r\n */\r\nexport function bool(percentage: number): Distribution<boolean>;\r\n/**\r\n * Returns a boolean Distribution with a probability of\r\n * `numerator` divided by `denominator` of being true\r\n * @param numerator The numerator of the probability\r\n * @param denominator The denominator of the probability\r\n */\r\nexport function bool(\r\n  numerator: number,\r\n  denominator: number\r\n): Distribution<boolean>;\r\nexport function bool(\r\n  numerator?: number,\r\n  denominator?: number\r\n): Distribution<boolean> {\r\n  if (denominator == null) {\r\n    if (numerator == null) {\r\n      return isLeastBitTrue;\r\n    }\r\n    return probability(numerator);\r\n  } else {\r\n    if (numerator! <= 0) {\r\n      return () => false;\r\n    } else if (numerator! >= denominator) {\r\n      return () => true;\r\n    }\r\n    return lessThan(integer(0, denominator - 1), numerator!);\r\n  }\r\n}\r\n","import { Distribution } from \"../types\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Returns a Distribution that returns a random `Date` within the inclusive\r\n * range of [`start`, `end`].\r\n * @param start The minimum `Date`\r\n * @param end The maximum `Date`\r\n */\r\nexport function date(start: Date, end: Date): Distribution<Date> {\r\n  const distribution = integer(+start, +end);\r\n  return engine => new Date(distribution(engine));\r\n}\r\n","import { Distribution } from \"../types\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Returns a Distribution to return a value within [1, sideCount]\r\n * @param sideCount The number of sides of the die\r\n */\r\nexport function die(sideCount: number): Distribution<number> {\r\n  return integer(1, sideCount);\r\n}\r\n","import { Distribution } from \"../types\";\r\nimport { die } from \"./die\";\r\n\r\n/**\r\n * Returns a distribution that returns an array of length `dieCount` of values\r\n * within [1, `sideCount`]\r\n * @param sideCount The number of sides of each die\r\n * @param dieCount The number of dice\r\n */\r\nexport function dice(\r\n  sideCount: number,\r\n  dieCount: number\r\n): Distribution<number[]> {\r\n  const distribution = die(sideCount);\r\n  return engine => {\r\n    const result = [];\r\n    for (let i = 0; i < dieCount; ++i) {\r\n      result.push(distribution(engine));\r\n    }\r\n    return result;\r\n  };\r\n}\r\n","import { StringDistribution } from \"../types\";\r\nimport { integer } from \"./integer\";\r\n\r\n// tslint:disable:unified-signatures\r\n\r\n// has 2**x chars, for faster uniform distribution\r\nconst DEFAULT_STRING_POOL =\r\n  \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\r\n\r\n/**\r\n * Returns a distribution that returns a random string using numbers,\r\n * uppercase and lowercase letters, `_`, and `-` of length `length`.\r\n * @param length Length of the result string\r\n */\r\nexport function string(): StringDistribution;\r\n/**\r\n * Returns a distribution that returns a random string using the provided\r\n * string pool as the possible characters to choose from of length `length`.\r\n * @param length Length of the result string\r\n */\r\nexport function string(pool: string): StringDistribution;\r\nexport function string(pool: string = DEFAULT_STRING_POOL): StringDistribution {\r\n  const poolLength = pool.length;\r\n  if (!poolLength) {\r\n    throw new Error(\"Expected pool not to be an empty string\");\r\n  }\r\n\r\n  const distribution = integer(0, poolLength - 1);\r\n  return (engine, length) => {\r\n    let result = \"\";\r\n    for (let i = 0; i < length; ++i) {\r\n      const j = distribution(engine);\r\n      result += pool.charAt(j);\r\n    }\r\n    return result;\r\n  };\r\n}\r\n","import { StringDistribution } from \"../types\";\r\nimport { string } from \"./string\";\r\n\r\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\r\nconst lowerHex = string(LOWER_HEX_POOL);\r\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\r\n\r\n/**\r\n * Returns a Distribution that returns a random string comprised of numbers\r\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\r\n * @param length Length of the result string\r\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n */\r\nexport function hex(uppercase?: boolean): StringDistribution {\r\n  if (uppercase) {\r\n    return upperHex;\r\n  } else {\r\n    return lowerHex;\r\n  }\r\n}\r\n","export function convertSliceArgument(value: number, length: number): number {\r\n  if (value < 0) {\r\n    return Math.max(value + length, 0);\r\n  } else {\r\n    return Math.min(value, length);\r\n  }\r\n}\r\n","export function toInteger(value: number) {\r\n  const num = +value;\r\n  if (num < 0) {\r\n    return Math.ceil(num);\r\n  } else {\r\n    return Math.floor(num);\r\n  }\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { convertSliceArgument } from \"../utils/convertSliceArgument\";\r\nimport { toInteger } from \"../utils/toInteger\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Returns a random value within the provided `source` within the sliced\r\n * bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nexport function pick<T>(\r\n  engine: Engine,\r\n  source: ArrayLike<T>,\r\n  begin?: number,\r\n  end?: number\r\n): T {\r\n  const length = source.length;\r\n  if (length === 0) {\r\n    throw new RangeError(\"Cannot pick from an empty array\");\r\n  }\r\n  const start =\r\n    begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\r\n  const finish =\r\n    end === void 0 ? length : convertSliceArgument(toInteger(end), length);\r\n  if (start >= finish) {\r\n    throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\r\n  }\r\n  const distribution = integer(start, finish - 1);\r\n  return source[distribution(engine)];\r\n}\r\n","import { Distribution } from \"../types\";\r\n\r\nexport function multiply(\r\n  distribution: Distribution,\r\n  multiplier: number\r\n): Distribution {\r\n  if (multiplier === 1) {\r\n    return distribution;\r\n  } else if (multiplier === 0) {\r\n    return () => 0;\r\n  } else {\r\n    return engine => distribution(engine) * multiplier;\r\n  }\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\r\nimport { uint53 } from \"./uint53\";\r\n\r\n/**\r\n * Returns a floating-point value within [0.0, 1.0)\r\n */\r\nexport function realZeroToOneExclusive(engine: Engine): number {\r\n  return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\r\nimport { uint53Full } from \"./uint53Full\";\r\n\r\n/**\r\n * Returns a floating-point value within [0.0, 1.0]\r\n */\r\nexport function realZeroToOneInclusive(engine: Engine): number {\r\n  return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\r\n","import { Distribution } from \"../types\";\r\nimport { add } from \"../utils/add\";\r\nimport { multiply } from \"../utils/multiply\";\r\nimport { realZeroToOneExclusive } from \"./realZeroToOneExclusive\";\r\nimport { realZeroToOneInclusive } from \"./realZeroToOneInclusive\";\r\n\r\n/**\r\n * Returns a floating-point value within [min, max) or [min, max]\r\n * @param min The minimum floating-point value, inclusive.\r\n * @param max The maximum floating-point value.\r\n * @param inclusive If true, `max` will be inclusive.\r\n */\r\nexport function real(\r\n  min: number,\r\n  max: number,\r\n  inclusive: boolean = false\r\n): Distribution {\r\n  if (!isFinite(min)) {\r\n    throw new RangeError(\"Expected min to be a finite number\");\r\n  } else if (!isFinite(max)) {\r\n    throw new RangeError(\"Expected max to be a finite number\");\r\n  }\r\n  return add(\r\n    multiply(\r\n      inclusive ? realZeroToOneInclusive : realZeroToOneExclusive,\r\n      max - min\r\n    ),\r\n    min\r\n  );\r\n}\r\n","export const sliceArray = Array.prototype.slice;\r\n","import { Engine } from \"../types\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Shuffles an array in-place\r\n * @param engine The Engine to use when choosing random values\r\n * @param array The array to shuffle\r\n * @param downTo minimum index to shuffle. Only used internally.\r\n */\r\nexport function shuffle<T>(\r\n  engine: Engine,\r\n  array: T[],\r\n  downTo: number = 0\r\n): T[] {\r\n  const length = array.length;\r\n  if (length) {\r\n    for (let i = (length - 1) >>> 0; i > downTo; --i) {\r\n      const distribution = integer(0, i);\r\n      const j = distribution(engine);\r\n      if (i !== j) {\r\n        const tmp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = tmp;\r\n      }\r\n    }\r\n  }\r\n  return array;\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { sliceArray } from \"../utils/sliceArray\";\r\nimport { shuffle } from \"./shuffle\";\r\n\r\n/**\r\n * From the population array, produce an array with sampleSize elements that\r\n * are randomly chosen without repeats.\r\n * @param engine The Engine to use when choosing random values\r\n * @param population An array that has items to choose a sample from\r\n * @param sampleSize The size of the result array\r\n */\r\nexport function sample<T>(\r\n  engine: Engine,\r\n  population: ArrayLike<T>,\r\n  sampleSize: number\r\n): T[] {\r\n  if (\r\n    sampleSize < 0 ||\r\n    sampleSize > population.length ||\r\n    !isFinite(sampleSize)\r\n  ) {\r\n    throw new RangeError(\r\n      \"Expected sampleSize to be within 0 and the length of the population\"\r\n    );\r\n  }\r\n\r\n  if (sampleSize === 0) {\r\n    return [];\r\n  }\r\n\r\n  const clone = sliceArray.call(population);\r\n  const length = clone.length;\r\n  if (length === sampleSize) {\r\n    return shuffle(engine, clone, 0);\r\n  }\r\n  const tailLength = length - sampleSize;\r\n  return shuffle(engine, clone, tailLength - 1).slice(tailLength);\r\n}\r\n","export const stringRepeat = (() => {\r\n  try {\r\n    if ((\"x\" as any).repeat(3) === \"xxx\") {\r\n      return (pattern: string, count: number): string =>\r\n        (pattern as any).repeat(count);\r\n    }\r\n  } catch (_) {\r\n    // nothing to do here\r\n  }\r\n  return (pattern: string, count: number): string => {\r\n    let result = \"\";\r\n    while (count > 0) {\r\n      if (count & 1) {\r\n        result += pattern;\r\n      }\r\n      count >>= 1;\r\n      pattern += pattern;\r\n    }\r\n    return result;\r\n  };\r\n})();\r\n","import { Engine } from \"../types\";\r\nimport { stringRepeat } from \"../utils/stringRepeat\";\r\n\r\nfunction zeroPad(text: string, zeroCount: number) {\r\n  return stringRepeat(\"0\", zeroCount - text.length) + text;\r\n}\r\n\r\n/**\r\n * Returns a Universally Unique Identifier Version 4.\r\n *\r\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n */\r\nexport function uuid4(engine: Engine) {\r\n  const a = engine.next() >>> 0;\r\n  const b = engine.next() | 0;\r\n  const c = engine.next() | 0;\r\n  const d = engine.next() >>> 0;\r\n\r\n  return (\r\n    zeroPad(a.toString(16), 8) +\r\n    \"-\" +\r\n    zeroPad((b & 0xffff).toString(16), 4) +\r\n    \"-\" +\r\n    zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\r\n    \"-\" +\r\n    zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\r\n    \"-\" +\r\n    zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\r\n    zeroPad(d.toString(16), 8)\r\n  );\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { UINT32_SIZE } from \"../utils/constants\";\r\n\r\n/**\r\n * An int32-producing Engine that uses `Math.random()`\r\n */\r\nexport const nativeMath: Engine = {\r\n  next() {\r\n    return (Math.random() * UINT32_SIZE) | 0;\r\n  }\r\n};\r\n","import { bool } from \"./distribution/bool\";\r\nimport { date } from \"./distribution/date\";\r\nimport { dice } from \"./distribution/dice\";\r\nimport { die } from \"./distribution/die\";\r\nimport { hex } from \"./distribution/hex\";\r\nimport { int32 } from \"./distribution/int32\";\r\nimport { int53 } from \"./distribution/int53\";\r\nimport { int53Full } from \"./distribution/int53Full\";\r\nimport { integer } from \"./distribution/integer\";\r\nimport { pick } from \"./distribution/pick\";\r\nimport { real } from \"./distribution/real\";\r\nimport { realZeroToOneExclusive } from \"./distribution/realZeroToOneExclusive\";\r\nimport { realZeroToOneInclusive } from \"./distribution/realZeroToOneInclusive\";\r\nimport { sample } from \"./distribution/sample\";\r\nimport { shuffle } from \"./distribution/shuffle\";\r\nimport { string } from \"./distribution/string\";\r\nimport { uint32 } from \"./distribution/uint32\";\r\nimport { uint53 } from \"./distribution/uint53\";\r\nimport { uint53Full } from \"./distribution/uint53Full\";\r\nimport { uuid4 } from \"./distribution/uuid4\";\r\nimport { nativeMath } from \"./engine/nativeMath\";\r\nimport { Engine } from \"./types\";\r\n\r\n// tslint:disable:unified-signatures\r\n\r\n/**\r\n * A wrapper around an Engine that provides easy-to-use methods for\r\n * producing values based on known distributions\r\n */\r\nexport class Random {\r\n  private readonly engine: Engine;\r\n\r\n  /**\r\n   * Creates a new Random wrapper\r\n   * @param engine The engine to use (defaults to a `Math.random`-based implementation)\r\n   */\r\n  constructor(engine: Engine = nativeMath) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [-0x80000000, 0x7fffffff]\r\n   */\r\n  public int32(): number {\r\n    return int32(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [0, 0xffffffff]\r\n   */\r\n  public uint32(): number {\r\n    return uint32(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [0, 0x1fffffffffffff]\r\n   */\r\n  public uint53(): number {\r\n    return uint53(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [0, 0x20000000000000]\r\n   */\r\n  public uint53Full(): number {\r\n    return uint53Full(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n   */\r\n  public int53(): number {\r\n    return int53(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n   */\r\n  public int53Full(): number {\r\n    return int53Full(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [min, max]\r\n   * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n   * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n   */\r\n  public integer(min: number, max: number): number {\r\n    return integer(min, max)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a floating-point value within [0.0, 1.0]\r\n   */\r\n  public realZeroToOneInclusive(): number {\r\n    return realZeroToOneInclusive(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a floating-point value within [0.0, 1.0)\r\n   */\r\n  public realZeroToOneExclusive(): number {\r\n    return realZeroToOneExclusive(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a floating-point value within [min, max) or [min, max]\r\n   * @param min The minimum floating-point value, inclusive.\r\n   * @param max The maximum floating-point value.\r\n   * @param inclusive If true, `max` will be inclusive.\r\n   */\r\n  public real(min: number, max: number, inclusive: boolean = false): number {\r\n    return real(min, max, inclusive)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a boolean with 50% probability of being true or false\r\n   */\r\n  public bool(): boolean;\r\n  /**\r\n   * Returns a boolean with the provided `percentage` of being true\r\n   * @param percentage A number within [0, 1] of how often the result should be `true`\r\n   */\r\n  public bool(percentage: number): boolean;\r\n  /**\r\n   * Returns a boolean with a probability of `numerator`/`denominator` of being true\r\n   * @param numerator The numerator of the probability\r\n   * @param denominator The denominator of the probability\r\n   */\r\n  public bool(numerator: number, denominator: number): boolean;\r\n  public bool(numerator?: number, denominator?: number): boolean {\r\n    return bool(numerator!, denominator!)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Return a random value within the provided `source` within the sliced\r\n   * bounds of `begin` and `end`.\r\n   * @param source an array of items to pick from\r\n   * @param begin the beginning slice index (defaults to `0`)\r\n   * @param end the ending slice index (defaults to `source.length`)\r\n   */\r\n  public pick<T>(source: ArrayLike<T>, begin?: number, end?: number): T {\r\n    return pick(this.engine, source, begin, end);\r\n  }\r\n\r\n  /**\r\n   * Shuffles an array in-place\r\n   * @param array The array to shuffle\r\n   */\r\n  public shuffle<T>(array: T[]): T[] {\r\n    return shuffle(this.engine, array);\r\n  }\r\n\r\n  /**\r\n   * From the population array, returns an array with sampleSize elements that\r\n   * are randomly chosen without repeats.\r\n   * @param population An array that has items to choose a sample from\r\n   * @param sampleSize The size of the result array\r\n   */\r\n  public sample<T>(population: ArrayLike<T>, sampleSize: number): T[] {\r\n    return sample(this.engine, population, sampleSize);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [1, sideCount]\r\n   * @param sideCount The number of sides of the die\r\n   */\r\n  public die(sideCount: number): number {\r\n    return die(sideCount)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns an array of length `dieCount` of values within [1, sideCount]\r\n   * @param sideCount The number of sides of each die\r\n   * @param dieCount The number of dice\r\n   */\r\n  public dice(sideCount: number, dieCount: number): number[] {\r\n    return dice(sideCount, dieCount)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a Universally Unique Identifier Version 4.\r\n   *\r\n   * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n   */\r\n  public uuid4(): string {\r\n    return uuid4(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a random string using numbers, uppercase and lowercase letters,\r\n   * `_`, and `-` of length `length`.\r\n   * @param length Length of the result string\r\n   */\r\n  public string(length: number): string;\r\n  /**\r\n   * Returns a random string using the provided string pool as the possible\r\n   * characters to choose from of length `length`.\r\n   * @param length Length of the result string\r\n   */\r\n  public string(length: number, pool: string): string;\r\n  public string(length: number, pool?: string): string {\r\n    return string(pool!)(this.engine, length);\r\n  }\r\n\r\n  /**\r\n   * Returns a random string comprised of numbers or the characters `abcdef`\r\n   * (or `ABCDEF`) of length `length`.\r\n   * @param length Length of the result string\r\n   * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n   */\r\n  public hex(length: number, uppercase?: boolean): string {\r\n    return hex(uppercase)(this.engine, length);\r\n  }\r\n\r\n  /**\r\n   * Returns a random `Date` within the inclusive range of [`start`, `end`].\r\n   * @param start The minimum `Date`\r\n   * @param end The maximum `Date`\r\n   */\r\n  public date(start: Date, end: Date): Date {\r\n    return date(start, end)(this.engine);\r\n  }\r\n}\r\n","import { INT32_SIZE } from \"./constants\";\r\n\r\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\r\n */\r\nconst I32Array: typeof Int32Array = (() => {\r\n  try {\r\n    const buffer = new ArrayBuffer(4);\r\n    const view = new Int32Array(buffer);\r\n    view[0] = INT32_SIZE;\r\n    if (view[0] === -INT32_SIZE) {\r\n      return Int32Array;\r\n    }\r\n  } catch (_) {\r\n    // nothing to do here\r\n  }\r\n  return (Array as unknown) as typeof Int32Array;\r\n})();\r\nexport { I32Array as Int32Array };\r\n","import { Engine } from \"../types\";\r\nimport { Int32Array } from \"../utils/Int32Array\";\r\n\r\nlet data: Int32Array | null = null;\r\nconst COUNT = 128;\r\nlet index = COUNT;\r\n\r\n/**\r\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\r\n * which is typically available in modern browsers.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\n *\r\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nexport const browserCrypto: Engine = {\r\n  next() {\r\n    if (index >= COUNT) {\r\n      if (data === null) {\r\n        data = new Int32Array(COUNT);\r\n      }\r\n      crypto.getRandomValues(data);\r\n      index = 0;\r\n    }\r\n    return data![index++] | 0;\r\n  }\r\n};\r\n","import { nativeMath } from \"../engine/nativeMath\";\r\nimport { Engine } from \"../types\";\r\n\r\n/**\r\n * Returns an array of random int32 values, based on current time\r\n * and a random number engine\r\n *\r\n * @param engine an Engine to pull random values from, default `nativeMath`\r\n * @param length the length of the Array, minimum 1, default 16\r\n */\r\nexport function createEntropy(\r\n  engine: Engine = nativeMath,\r\n  length: number = 16\r\n): number[] {\r\n  const array: number[] = [];\r\n  array.push(new Date().getTime() | 0);\r\n  for (let i = 1; i < length; ++i) {\r\n    array[i] = engine.next() | 0;\r\n  }\r\n  return array;\r\n}\r\n","import { UINT32_MAX } from \"./constants\";\r\n\r\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\r\n */\r\nexport const imul: (a: number, b: number) => number = (() => {\r\n  try {\r\n    if ((Math as any).imul(UINT32_MAX, 5) === -5) {\r\n      return (Math as any).imul;\r\n    }\r\n  } catch (_) {\r\n    // nothing to do here\r\n  }\r\n  const UINT16_MAX = 0xffff;\r\n  return (a: number, b: number) => {\r\n    const ah = (a >>> 16) & UINT16_MAX;\r\n    const al = a & UINT16_MAX;\r\n    const bh = (b >>> 16) & UINT16_MAX;\r\n    const bl = b & UINT16_MAX;\r\n    // the shift by 0 fixes the sign on the high part\r\n    // the final |0 converts the unsigned value into a signed value\r\n    return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\r\n  };\r\n})();\r\n","import { Engine } from \"../types\";\r\nimport { INT32_MAX, INT32_SIZE } from \"../utils/constants\";\r\nimport { createEntropy } from \"../utils/createEntropy\";\r\nimport { imul } from \"../utils/imul\";\r\nimport { Int32Array } from \"../utils/Int32Array\";\r\n\r\nconst ARRAY_SIZE = 624;\r\nconst ARRAY_MAX = ARRAY_SIZE - 1;\r\nconst M = 397;\r\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\r\nconst A = 0x9908b0df;\r\n\r\n/**\r\n * An Engine that is a pseudorandom number generator using the Mersenne\r\n * Twister algorithm based on the prime 2**19937 − 1\r\n *\r\n * See http://en.wikipedia.org/wiki/Mersenne_twister\r\n */\r\nexport class MersenneTwister19937 implements Engine {\r\n  /**\r\n   * Returns a MersenneTwister19937 seeded with an initial int32 value\r\n   * @param initial the initial seed value\r\n   */\r\n  public static seed(initial: number): MersenneTwister19937 {\r\n    return new MersenneTwister19937().seed(initial);\r\n  }\r\n\r\n  /**\r\n   * Returns a MersenneTwister19937 seeded with zero or more int32 values\r\n   * @param source A series of int32 values\r\n   */\r\n  public static seedWithArray(source: ArrayLike<number>): MersenneTwister19937 {\r\n    return new MersenneTwister19937().seedWithArray(source);\r\n  }\r\n\r\n  /**\r\n   * Returns a MersenneTwister19937 seeded with the current time and\r\n   * a series of natively-generated random values\r\n   */\r\n  public static autoSeed(): MersenneTwister19937 {\r\n    return MersenneTwister19937.seedWithArray(createEntropy());\r\n  }\r\n\r\n  private readonly data = new Int32Array(ARRAY_SIZE);\r\n  private index = 0; // integer within [0, 624]\r\n  private uses = 0;\r\n\r\n  /**\r\n   * MersenneTwister19937 should not be instantiated directly.\r\n   * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Returns the next int32 value of the sequence\r\n   */\r\n  public next(): number {\r\n    if ((this.index | 0) >= ARRAY_SIZE) {\r\n      refreshData(this.data);\r\n      this.index = 0;\r\n    }\r\n\r\n    const value = this.data[this.index];\r\n    this.index = (this.index + 1) | 0;\r\n    this.uses += 1;\r\n    return temper(value) | 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of times that the Engine has been used.\r\n   *\r\n   * This can be provided to an unused MersenneTwister19937 with the same\r\n   * seed, bringing it to the exact point that was left off.\r\n   */\r\n  public getUseCount(): number {\r\n    return this.uses;\r\n  }\r\n\r\n  /**\r\n   * Discards one or more items from the engine\r\n   * @param count The count of items to discard\r\n   */\r\n  public discard(count: number): this {\r\n    if (count <= 0) {\r\n      return this;\r\n    }\r\n    this.uses += count;\r\n    if ((this.index | 0) >= ARRAY_SIZE) {\r\n      refreshData(this.data);\r\n      this.index = 0;\r\n    }\r\n    while (count + this.index > ARRAY_SIZE) {\r\n      count -= ARRAY_SIZE - this.index;\r\n      refreshData(this.data);\r\n      this.index = 0;\r\n    }\r\n    this.index = (this.index + count) | 0;\r\n    return this;\r\n  }\r\n\r\n  private seed(initial: number): this {\r\n    let previous = 0;\r\n    this.data[0] = previous = initial | 0;\r\n\r\n    for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\r\n      this.data[i] = previous =\r\n        (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\r\n    }\r\n    this.index = ARRAY_SIZE;\r\n    this.uses = 0;\r\n    return this;\r\n  }\r\n\r\n  private seedWithArray(source: ArrayLike<number>): this {\r\n    this.seed(0x012bd6aa);\r\n    seedWithArray(this.data, source);\r\n    return this;\r\n  }\r\n}\r\n\r\nfunction refreshData(data: Int32Array) {\r\n  let k = 0;\r\n  let tmp = 0;\r\n  for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\r\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n    data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n  }\r\n\r\n  for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\r\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n    data[k] =\r\n      data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n  }\r\n\r\n  tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\r\n  data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n}\r\n\r\nfunction temper(value: number) {\r\n  value ^= value >>> 11;\r\n  value ^= (value << 7) & 0x9d2c5680;\r\n  value ^= (value << 15) & 0xefc60000;\r\n  return value ^ (value >>> 18);\r\n}\r\n\r\nfunction seedWithArray(data: Int32Array, source: ArrayLike<number>) {\r\n  let i = 1;\r\n  let j = 0;\r\n  const sourceLength = source.length;\r\n  let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\r\n  let previous = data[0] | 0;\r\n  for (; (k | 0) > 0; --k) {\r\n    data[i] = previous =\r\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\r\n        (source[j] | 0) +\r\n        (j | 0)) |\r\n      0;\r\n    i = (i + 1) | 0;\r\n    ++j;\r\n    if ((i | 0) > ARRAY_MAX) {\r\n      data[0] = data[ARRAY_MAX];\r\n      i = 1;\r\n    }\r\n    if (j >= sourceLength) {\r\n      j = 0;\r\n    }\r\n  }\r\n  for (k = ARRAY_MAX; (k | 0) > 0; --k) {\r\n    data[i] = previous =\r\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\r\n    i = (i + 1) | 0;\r\n    if ((i | 0) > ARRAY_MAX) {\r\n      data[0] = data[ARRAY_MAX];\r\n      i = 1;\r\n    }\r\n  }\r\n  data[0] = INT32_SIZE;\r\n}\r\n","import { Engine } from \"../types\";\r\n\r\nlet data: Int32Array | null = null;\r\nconst COUNT = 128;\r\nlet index = COUNT;\r\n\r\n/**\r\n * An Engine that relies on the node-available\r\n * `require('crypto').randomBytes`, which has been available since 0.58.\r\n *\r\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\r\n *\r\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nexport const nodeCrypto: Engine = {\r\n  next() {\r\n    if (index >= COUNT) {\r\n      data = new Int32Array(\r\n        new Int8Array(require(\"crypto\").randomBytes(4 * COUNT)).buffer\r\n      );\r\n      index = 0;\r\n    }\r\n    return data![index++] | 0;\r\n  }\r\n};\r\n","import { Distribution } from \"../types\";\r\nimport { sliceArray } from \"../utils/sliceArray\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Returns a Distribution to random value within the provided `source`\r\n * within the sliced bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nexport function picker<T>(\r\n  source: ArrayLike<T>,\r\n  begin?: number,\r\n  end?: number\r\n): Distribution<T> {\r\n  const clone = sliceArray.call(source, begin, end);\r\n  if (clone.length === 0) {\r\n    throw new RangeError(`Cannot pick from a source with no items`);\r\n  }\r\n  const distribution = integer(0, clone.length - 1);\r\n  return engine => clone[distribution(engine)];\r\n}\r\n"],"names":["data","COUNT","index","Int32Array"],"mappings":"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"}