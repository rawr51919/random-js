{"version":3,"names":["SMALLEST_UNSAFE_INTEGER","LARGEST_SAFE_INTEGER","UINT32_MAX","UINT32_SIZE","INT32_SIZE","INT32_MAX","UINT21_SIZE","UINT21_MAX","int32","engine","next","add","distribution","addend","int53","high","low","int53Full","uint32","uint53","uint53Full","isPowerOfTwoMinusOne","value","downscaleToRange","range","masking","extendedRange","maximum","Math","floor","downscaleToLoopCheckedRange","upscaleWithinU53","highRange","ret","upscaleToLoopCheckedRange","upscaleWithinI53AndLoopCheck","min","max","integer","isFinite","RangeError","concat","isLeastBitTrue","lessThan","bool","numerator","denominator","percentage","scaled","round","probability","date","start","end","Date","die","sideCount","dice","dieCount","result","i","push","string","pool","poolLength","length","Error","j","charAt","LOWER_HEX_POOL","lowerHex","upperHex","toUpperCase","hex","uppercase","convertSliceArgument","toInteger","num","ceil","pick","source","begin","finish","realZeroToOneExclusive","realZeroToOneInclusive","real","inclusive","multiplier","sliceArray","Array","prototype","slice","shuffle","array","downTo","tmp","sample","population","sampleSize","clone","call","tailLength","stringRepeat","repeat","pattern","count","_","zeroPad","text","zeroCount","uuid4","a","b","c","d","toString","nativeMath","random","Random","this","I32Array","buffer","ArrayBuffer","view","Int32Array","data","index","browserCrypto","crypto","getRandomValues","createEntropy","getTime","imul","UINT16_MAX","al","bl","ARRAY_SIZE","ARRAY_MAX","A","MersenneTwister19937","uses","seed","initial","seedWithArray","autoSeed","refreshData","temper","getUseCount","discard","previous","sourceLength","k","M","nodeCrypto","Int8Array","require","randomBytes"],"sources":["../src/utils/constants.ts","../src/distribution/int32.ts","../src/utils/add.ts","../src/distribution/int53.ts","../src/distribution/int53Full.ts","../src/distribution/uint32.ts","../src/distribution/uint53.ts","../src/distribution/uint53Full.ts","../src/distribution/integer.ts","../src/distribution/bool.ts","../src/distribution/date.ts","../src/distribution/die.ts","../src/distribution/dice.ts","../src/distribution/string.ts","../src/distribution/hex.ts","../src/utils/convertSliceArgument.ts","../src/utils/toInteger.ts","../src/distribution/pick.ts","../src/distribution/realZeroToOneExclusive.ts","../src/distribution/realZeroToOneInclusive.ts","../src/distribution/real.ts","../src/utils/multiply.ts","../src/utils/sliceArray.ts","../src/distribution/shuffle.ts","../src/distribution/sample.ts","../src/utils/stringRepeat.ts","../src/distribution/uuid4.ts","../src/engine/nativeMath.ts","../src/Random.ts","../src/utils/Int32Array.ts","../src/engine/browserCrypto.ts","../src/utils/createEntropy.ts","../src/utils/imul.ts","../src/engine/MersenneTwister19937.ts","../src/engine/nodeCrypto.ts","../src/distribution/picker.ts"],"sourcesContent":["export const SMALLEST_UNSAFE_INTEGER = 0x20000000000000;\r\nexport const LARGEST_SAFE_INTEGER = SMALLEST_UNSAFE_INTEGER - 1;\r\nexport const UINT32_MAX = -1 >>> 0;\r\nexport const UINT32_SIZE = UINT32_MAX + 1;\r\nexport const INT32_SIZE = UINT32_SIZE / 2;\r\nexport const INT32_MAX = INT32_SIZE - 1;\r\nexport const UINT21_SIZE = 1 << 21;\r\nexport const UINT21_MAX = UINT21_SIZE - 1;\r\n","import { Engine } from \"../types\";\r\n\r\n/**\r\n * Returns a value within [-0x80000000, 0x7fffffff]\r\n */\r\nexport function int32(engine: Engine): number {\r\n  return engine.next() | 0;\r\n}\r\n","import { Distribution } from \"../types\";\r\n\r\nexport function add(distribution: Distribution, addend: number): Distribution {\r\n  if (addend === 0) {\r\n    return distribution;\r\n  } else {\r\n    return engine => distribution(engine) + addend;\r\n  }\r\n}\r\n","import { Engine } from \"../types\";\r\nimport {\r\n  SMALLEST_UNSAFE_INTEGER,\r\n  UINT21_MAX,\r\n  UINT21_SIZE,\r\n  UINT32_SIZE\r\n} from \"../utils/constants\";\r\n\r\n/**\r\n * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n */\r\nexport function int53(engine: Engine): number {\r\n  const high = engine.next() | 0;\r\n  const low = engine.next() >>> 0;\r\n  return (\r\n    (high & UINT21_MAX) * UINT32_SIZE +\r\n    low +\r\n    (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\r\n  );\r\n}\r\n","import { Engine } from \"../types\";\r\nimport {\r\n  SMALLEST_UNSAFE_INTEGER,\r\n  UINT21_MAX,\r\n  UINT21_SIZE,\r\n  UINT32_SIZE\r\n} from \"../utils/constants\";\r\n\r\n/**\r\n * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n */\r\nexport function int53Full(engine: Engine): number {\r\n  while (true) {\r\n    const high = engine.next() | 0;\r\n    if (high & 0x400000) {\r\n      if ((high & 0x7fffff) === 0x400000 && (engine.next() | 0) === 0) {\r\n        return SMALLEST_UNSAFE_INTEGER;\r\n      }\r\n    } else {\r\n      const low = engine.next() >>> 0;\r\n      return (\r\n        (high & UINT21_MAX) * UINT32_SIZE +\r\n        low +\r\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0)\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Engine } from \"../types\";\r\n\r\n/**\r\n * Returns a value within [0, 0xffffffff]\r\n */\r\nexport function uint32(engine: Engine): number {\r\n  return engine.next() >>> 0;\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { UINT21_MAX, UINT32_SIZE } from \"../utils/constants\";\r\n\r\n/**\r\n * Returns a value within [0, 0x1fffffffffffff]\r\n */\r\nexport function uint53(engine: Engine): number {\r\n  const high = engine.next() & UINT21_MAX;\r\n  const low = engine.next() >>> 0;\r\n  return high * UINT32_SIZE + low;\r\n}\r\n","import { Engine } from \"../types\";\r\nimport {\r\n  SMALLEST_UNSAFE_INTEGER,\r\n  UINT21_MAX,\r\n  UINT21_SIZE,\r\n  UINT32_SIZE\r\n} from \"../utils/constants\";\r\n\r\n/**\r\n * Returns a value within [0, 0x20000000000000]\r\n */\r\nexport function uint53Full(engine: Engine): number {\r\n  while (true) {\r\n    const high = engine.next() | 0;\r\n    if (high & UINT21_SIZE) {\r\n      if ((high & UINT21_MAX) === 0 && (engine.next() | 0) === 0) {\r\n        return SMALLEST_UNSAFE_INTEGER;\r\n      }\r\n    } else {\r\n      const low = engine.next() >>> 0;\r\n      return (high & UINT21_MAX) * UINT32_SIZE + low;\r\n    }\r\n  }\r\n}\r\n","import { Distribution, Engine } from \"../types\";\r\nimport { add } from \"../utils/add\";\r\nimport {\r\n  INT32_SIZE,\r\n  LARGEST_SAFE_INTEGER,\r\n  SMALLEST_UNSAFE_INTEGER,\r\n  UINT21_MAX,\r\n  UINT21_SIZE,\r\n  UINT32_MAX,\r\n  UINT32_SIZE\r\n} from \"../utils/constants\";\r\nimport { int32 } from \"./int32\";\r\nimport { int53 } from \"./int53\";\r\nimport { int53Full } from \"./int53Full\";\r\nimport { uint32 } from \"./uint32\";\r\nimport { uint53 } from \"./uint53\";\r\nimport { uint53Full } from \"./uint53Full\";\r\n\r\nfunction isPowerOfTwoMinusOne(value: number): boolean {\r\n  return ((value + 1) & value) === 0;\r\n}\r\n\r\nfunction bitmask(masking: number): Distribution {\r\n  return (engine: Engine) => engine.next() & masking;\r\n}\r\n\r\nfunction downscaleToLoopCheckedRange(range: number): Distribution {\r\n  const extendedRange = range + 1;\r\n  const maximum = extendedRange * Math.floor(UINT32_SIZE / extendedRange);\r\n  return engine => {\r\n    let value = 0;\r\n    do {\r\n      value = engine.next() >>> 0;\r\n    } while (value >= maximum);\r\n    return value % extendedRange;\r\n  };\r\n}\r\n\r\nfunction downscaleToRange(range: number): Distribution {\r\n  if (isPowerOfTwoMinusOne(range)) {\r\n    return bitmask(range);\r\n  } else {\r\n    return downscaleToLoopCheckedRange(range);\r\n  }\r\n}\r\n\r\nfunction isEvenlyDivisibleByMaxInt32(value: number): boolean {\r\n  return (value | 0) === 0;\r\n}\r\n\r\nfunction upscaleWithHighMasking(masking: number): Distribution {\r\n  return engine => {\r\n    const high = engine.next() & masking;\r\n    const low = engine.next() >>> 0;\r\n    return high * UINT32_SIZE + low;\r\n  };\r\n}\r\n\r\nfunction upscaleToLoopCheckedRange(extendedRange: number): Distribution {\r\n  const maximum =\r\n    extendedRange * Math.floor(SMALLEST_UNSAFE_INTEGER / extendedRange);\r\n  return engine => {\r\n    let ret = 0;\r\n    do {\r\n      const high = engine.next() & UINT21_MAX;\r\n      const low = engine.next() >>> 0;\r\n      ret = high * UINT32_SIZE + low;\r\n    } while (ret >= maximum);\r\n    return ret % extendedRange;\r\n  };\r\n}\r\n\r\nfunction upscaleWithinU53(range: number): Distribution {\r\n  const extendedRange = range + 1;\r\n  if (isEvenlyDivisibleByMaxInt32(extendedRange)) {\r\n    const highRange = ((extendedRange / UINT32_SIZE) | 0) - 1;\r\n    if (isPowerOfTwoMinusOne(highRange)) {\r\n      return upscaleWithHighMasking(highRange);\r\n    }\r\n  }\r\n  return upscaleToLoopCheckedRange(extendedRange);\r\n}\r\n\r\nfunction upscaleWithinI53AndLoopCheck(min: number, max: number): Distribution {\r\n  return engine => {\r\n    let ret = 0;\r\n    do {\r\n      const high = engine.next() | 0;\r\n      const low = engine.next() >>> 0;\r\n      ret =\r\n        (high & UINT21_MAX) * UINT32_SIZE +\r\n        low +\r\n        (high & UINT21_SIZE ? -SMALLEST_UNSAFE_INTEGER : 0);\r\n    } while (ret < min || ret > max);\r\n    return ret;\r\n  };\r\n}\r\n\r\n/**\r\n * Returns a Distribution to return a value within [min, max]\r\n * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n */\r\nexport function integer(min: number, max: number): Distribution {\r\n  min = Math.floor(min);\r\n  max = Math.floor(max);\r\n  if (min < -SMALLEST_UNSAFE_INTEGER || !isFinite(min)) {\r\n    throw new RangeError(\r\n      `Expected min to be at least ${-SMALLEST_UNSAFE_INTEGER}`\r\n    );\r\n  } else if (max > SMALLEST_UNSAFE_INTEGER || !isFinite(max)) {\r\n    throw new RangeError(\r\n      `Expected max to be at most ${SMALLEST_UNSAFE_INTEGER}`\r\n    );\r\n  }\r\n\r\n  const range = max - min;\r\n  if (range <= 0 || !isFinite(range)) {\r\n    return () => min;\r\n  } else if (range === UINT32_MAX) {\r\n    if (min === 0) {\r\n      return uint32;\r\n    } else {\r\n      return add(int32, min + INT32_SIZE);\r\n    }\r\n  } else if (range < UINT32_MAX) {\r\n    return add(downscaleToRange(range), min);\r\n  } else if (range === LARGEST_SAFE_INTEGER) {\r\n    return add(uint53, min);\r\n  } else if (range < LARGEST_SAFE_INTEGER) {\r\n    return add(upscaleWithinU53(range), min);\r\n  } else if (max - 1 - min === LARGEST_SAFE_INTEGER) {\r\n    return add(uint53Full, min);\r\n  } else if (\r\n    min === -SMALLEST_UNSAFE_INTEGER &&\r\n    max === SMALLEST_UNSAFE_INTEGER\r\n  ) {\r\n    return int53Full;\r\n  } else if (min === -SMALLEST_UNSAFE_INTEGER && max === LARGEST_SAFE_INTEGER) {\r\n    return int53;\r\n  } else if (min === -LARGEST_SAFE_INTEGER && max === SMALLEST_UNSAFE_INTEGER) {\r\n    return add(int53, 1);\r\n  } else if (max === SMALLEST_UNSAFE_INTEGER) {\r\n    return add(upscaleWithinI53AndLoopCheck(min - 1, max - 1), 1);\r\n  } else {\r\n    return upscaleWithinI53AndLoopCheck(min, max);\r\n  }\r\n}\r\n","import { Distribution, Engine } from \"../types\";\r\nimport { INT32_SIZE, SMALLEST_UNSAFE_INTEGER, UINT32_SIZE } from \"../utils/constants\";\r\nimport { int32 } from \"./int32\";\r\nimport { integer } from \"./integer\";\r\nimport { uint53 } from \"./uint53\";\r\n\r\nfunction isLeastBitTrue(engine: Engine) {\r\n  return (engine.next() & 1) === 1;\r\n}\r\n\r\nfunction lessThan(\r\n  distribution: Distribution,\r\n  value: number\r\n): Distribution<boolean> {\r\n  return engine => distribution(engine) < value;\r\n}\r\n\r\nfunction probability(percentage: number) {\r\n  if (percentage <= 0) {\r\n    return () => false;\r\n  } else if (percentage >= 1) {\r\n    return () => true;\r\n  } else {\r\n    const scaled = percentage * UINT32_SIZE;\r\n    if (scaled % 1 === 0) {\r\n      return lessThan(int32, (scaled - INT32_SIZE) | 0);\r\n    } else {\r\n      return lessThan(uint53, Math.round(percentage * SMALLEST_UNSAFE_INTEGER));\r\n    }\r\n  }\r\n}\r\n\r\n// tslint:disable:unified-signatures\r\n\r\n/**\r\n * Returns a boolean Distribution with 50% probability of being true or false\r\n */\r\nexport function bool(): Distribution<boolean>;\r\n/**\r\n * Returns a boolean Distribution with the provided `percentage` of being true\r\n * @param percentage A number within [0, 1] of how often the result should be `true`\r\n */\r\nexport function bool(percentage: number): Distribution<boolean>;\r\n/**\r\n * Returns a boolean Distribution with a probability of\r\n * `numerator` divided by `denominator` of being true\r\n * @param numerator The numerator of the probability\r\n * @param denominator The denominator of the probability\r\n */\r\nexport function bool(\r\n  numerator: number,\r\n  denominator: number\r\n): Distribution<boolean>;\r\nexport function bool(\r\n  numerator?: number,\r\n  denominator?: number\r\n): Distribution<boolean> {\r\n  if (denominator == null) {\r\n    if (numerator == null) {\r\n      return isLeastBitTrue;\r\n    }\r\n    return probability(numerator);\r\n  } else {\r\n    if (numerator! <= 0) {\r\n      return () => false;\r\n    } else if (numerator! >= denominator) {\r\n      return () => true;\r\n    }\r\n    return lessThan(integer(0, denominator - 1), numerator!);\r\n  }\r\n}\r\n","import { Distribution } from \"../types\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Returns a Distribution that returns a random `Date` within the inclusive\r\n * range of [`start`, `end`].\r\n * @param start The minimum `Date`\r\n * @param end The maximum `Date`\r\n */\r\nexport function date(start: Date, end: Date): Distribution<Date> {\r\n  const distribution = integer(+start, +end);\r\n  return engine => new Date(distribution(engine));\r\n}\r\n","import { Distribution } from \"../types\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Returns a Distribution to return a value within [1, sideCount]\r\n * @param sideCount The number of sides of the die\r\n */\r\nexport function die(sideCount: number): Distribution<number> {\r\n  return integer(1, sideCount);\r\n}\r\n","import { Distribution } from \"../types\";\r\nimport { die } from \"./die\";\r\n\r\n/**\r\n * Returns a distribution that returns an array of length `dieCount` of values\r\n * within [1, `sideCount`]\r\n * @param sideCount The number of sides of each die\r\n * @param dieCount The number of dice\r\n */\r\nexport function dice(\r\n  sideCount: number,\r\n  dieCount: number\r\n): Distribution<number[]> {\r\n  const distribution = die(sideCount);\r\n  return engine => {\r\n    const result = [];\r\n    for (let i = 0; i < dieCount; ++i) {\r\n      result.push(distribution(engine));\r\n    }\r\n    return result;\r\n  };\r\n}\r\n","import { StringDistribution } from \"../types\";\r\nimport { integer } from \"./integer\";\r\n\r\n// tslint:disable:unified-signatures\r\n\r\n// has 2**x chars, for faster uniform distribution\r\nconst DEFAULT_STRING_POOL =\r\n  \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-\";\r\n\r\n/**\r\n * Returns a distribution that returns a random string using numbers,\r\n * uppercase and lowercase letters, `_`, and `-` of length `length`.\r\n * @param length Length of the result string\r\n */\r\nexport function string(): StringDistribution;\r\n/**\r\n * Returns a distribution that returns a random string using the provided\r\n * string pool as the possible characters to choose from of length `length`.\r\n * @param length Length of the result string\r\n */\r\nexport function string(pool: string): StringDistribution;\r\nexport function string(pool: string = DEFAULT_STRING_POOL): StringDistribution {\r\n  const poolLength = pool.length;\r\n  if (!poolLength) {\r\n    throw new Error(\"Expected pool not to be an empty string\");\r\n  }\r\n\r\n  const distribution = integer(0, poolLength - 1);\r\n  return (engine, length) => {\r\n    let result = \"\";\r\n    for (let i = 0; i < length; ++i) {\r\n      const j = distribution(engine);\r\n      result += pool.charAt(j);\r\n    }\r\n    return result;\r\n  };\r\n}\r\n","import { StringDistribution } from \"../types\";\r\nimport { string } from \"./string\";\r\n\r\nconst LOWER_HEX_POOL = \"0123456789abcdef\";\r\nconst lowerHex = string(LOWER_HEX_POOL);\r\nconst upperHex = string(LOWER_HEX_POOL.toUpperCase());\r\n\r\n/**\r\n * Returns a Distribution that returns a random string comprised of numbers\r\n * or the characters `abcdef` (or `ABCDEF`) of length `length`.\r\n * @param length Length of the result string\r\n * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n */\r\nexport function hex(uppercase?: boolean): StringDistribution {\r\n  if (uppercase) {\r\n    return upperHex;\r\n  } else {\r\n    return lowerHex;\r\n  }\r\n}\r\n","export function convertSliceArgument(value: number, length: number): number {\r\n  if (value < 0) {\r\n    return Math.max(value + length, 0);\r\n  } else {\r\n    return Math.min(value, length);\r\n  }\r\n}\r\n","export function toInteger(value: number) {\r\n  const num = +value;\r\n  if (num < 0) {\r\n    return Math.ceil(num);\r\n  } else {\r\n    return Math.floor(num);\r\n  }\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { convertSliceArgument } from \"../utils/convertSliceArgument\";\r\nimport { toInteger } from \"../utils/toInteger\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Returns a random value within the provided `source` within the sliced\r\n * bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nexport function pick<T>(\r\n  engine: Engine,\r\n  source: ArrayLike<T>,\r\n  begin?: number,\r\n  end?: number\r\n): T {\r\n  const length = source.length;\r\n  if (length === 0) {\r\n    throw new RangeError(\"Cannot pick from an empty array\");\r\n  }\r\n  const start =\r\n    begin == null ? 0 : convertSliceArgument(toInteger(begin), length);\r\n  const finish =\r\n    end === void 0 ? length : convertSliceArgument(toInteger(end), length);\r\n  if (start >= finish) {\r\n    throw new RangeError(`Cannot pick between bounds ${start} and ${finish}`);\r\n  }\r\n  const distribution = integer(start, finish - 1);\r\n  return source[distribution(engine)];\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\r\nimport { uint53 } from \"./uint53\";\r\n\r\n/**\r\n * Returns a floating-point value within [0.0, 1.0)\r\n */\r\nexport function realZeroToOneExclusive(engine: Engine): number {\r\n  return uint53(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { SMALLEST_UNSAFE_INTEGER } from \"../utils/constants\";\r\nimport { uint53Full } from \"./uint53Full\";\r\n\r\n/**\r\n * Returns a floating-point value within [0.0, 1.0]\r\n */\r\nexport function realZeroToOneInclusive(engine: Engine): number {\r\n  return uint53Full(engine) / SMALLEST_UNSAFE_INTEGER;\r\n}\r\n","import { Distribution } from \"../types\";\r\nimport { add } from \"../utils/add\";\r\nimport { multiply } from \"../utils/multiply\";\r\nimport { realZeroToOneExclusive } from \"./realZeroToOneExclusive\";\r\nimport { realZeroToOneInclusive } from \"./realZeroToOneInclusive\";\r\n\r\n/**\r\n * Returns a floating-point value within [min, max) or [min, max]\r\n * @param min The minimum floating-point value, inclusive.\r\n * @param max The maximum floating-point value.\r\n * @param inclusive If true, `max` will be inclusive.\r\n */\r\nexport function real(\r\n  min: number,\r\n  max: number,\r\n  inclusive: boolean = false\r\n): Distribution {\r\n  if (!isFinite(min)) {\r\n    throw new RangeError(\"Expected min to be a finite number\");\r\n  } else if (!isFinite(max)) {\r\n    throw new RangeError(\"Expected max to be a finite number\");\r\n  }\r\n  return add(\r\n    multiply(\r\n      inclusive ? realZeroToOneInclusive : realZeroToOneExclusive,\r\n      max - min\r\n    ),\r\n    min\r\n  );\r\n}\r\n","import { Distribution } from \"../types\";\r\n\r\nexport function multiply(\r\n  distribution: Distribution,\r\n  multiplier: number\r\n): Distribution {\r\n  if (multiplier === 1) {\r\n    return distribution;\r\n  } else if (multiplier === 0) {\r\n    return () => 0;\r\n  } else {\r\n    return engine => distribution(engine) * multiplier;\r\n  }\r\n}\r\n","export const sliceArray = Array.prototype.slice;\r\n","import { Engine } from \"../types\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Shuffles an array in-place\r\n * @param engine The Engine to use when choosing random values\r\n * @param array The array to shuffle\r\n * @param downTo minimum index to shuffle. Only used internally.\r\n */\r\nexport function shuffle<T>(\r\n  engine: Engine,\r\n  array: T[],\r\n  downTo: number = 0\r\n): T[] {\r\n  const length = array.length;\r\n  if (length) {\r\n    for (let i = (length - 1) >>> 0; i > downTo; --i) {\r\n      const distribution = integer(0, i);\r\n      const j = distribution(engine);\r\n      if (i !== j) {\r\n        const tmp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = tmp;\r\n      }\r\n    }\r\n  }\r\n  return array;\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { sliceArray } from \"../utils/sliceArray\";\r\nimport { shuffle } from \"./shuffle\";\r\n\r\n/**\r\n * From the population array, produce an array with sampleSize elements that\r\n * are randomly chosen without repeats.\r\n * @param engine The Engine to use when choosing random values\r\n * @param population An array that has items to choose a sample from\r\n * @param sampleSize The size of the result array\r\n */\r\nexport function sample<T>(\r\n  engine: Engine,\r\n  population: ArrayLike<T>,\r\n  sampleSize: number\r\n): T[] {\r\n  if (\r\n    sampleSize < 0 ||\r\n    sampleSize > population.length ||\r\n    !isFinite(sampleSize)\r\n  ) {\r\n    throw new RangeError(\r\n      \"Expected sampleSize to be within 0 and the length of the population\"\r\n    );\r\n  }\r\n\r\n  if (sampleSize === 0) {\r\n    return [];\r\n  }\r\n\r\n  const clone = sliceArray.call(population);\r\n  const length = clone.length;\r\n  if (length === sampleSize) {\r\n    return shuffle(engine, clone, 0);\r\n  }\r\n  const tailLength = length - sampleSize;\r\n  return shuffle(engine, clone, tailLength - 1).slice(tailLength);\r\n}\r\n","export const stringRepeat = (() => {\r\n  try {\r\n    if ((\"x\" as any).repeat(3) === \"xxx\") {\r\n      return (pattern: string, count: number): string =>\r\n        (pattern as any).repeat(count);\r\n    }\r\n  } catch (_) {\r\n    // nothing to do here\r\n  }\r\n  return (pattern: string, count: number): string => {\r\n    let result = \"\";\r\n    while (count > 0) {\r\n      if (count & 1) {\r\n        result += pattern;\r\n      }\r\n      count >>= 1;\r\n      pattern += pattern;\r\n    }\r\n    return result;\r\n  };\r\n})();\r\n","import { Engine } from \"../types\";\r\nimport { stringRepeat } from \"../utils/stringRepeat\";\r\n\r\nfunction zeroPad(text: string, zeroCount: number) {\r\n  return stringRepeat(\"0\", zeroCount - text.length) + text;\r\n}\r\n\r\n/**\r\n * Returns a Universally Unique Identifier Version 4.\r\n *\r\n * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n */\r\nexport function uuid4(engine: Engine) {\r\n  const a = engine.next() >>> 0;\r\n  const b = engine.next() | 0;\r\n  const c = engine.next() | 0;\r\n  const d = engine.next() >>> 0;\r\n\r\n  return (\r\n    zeroPad(a.toString(16), 8) +\r\n    \"-\" +\r\n    zeroPad((b & 0xffff).toString(16), 4) +\r\n    \"-\" +\r\n    zeroPad((((b >> 4) & 0x0fff) | 0x4000).toString(16), 4) +\r\n    \"-\" +\r\n    zeroPad(((c & 0x3fff) | 0x8000).toString(16), 4) +\r\n    \"-\" +\r\n    zeroPad(((c >> 4) & 0xffff).toString(16), 4) +\r\n    zeroPad(d.toString(16), 8)\r\n  );\r\n}\r\n","import { Engine } from \"../types\";\r\nimport { UINT32_SIZE } from \"../utils/constants\";\r\n\r\n/**\r\n * An int32-producing Engine that uses `Math.random()`\r\n */\r\nexport const nativeMath: Engine = {\r\n  next() {\r\n    return (Math.random() * UINT32_SIZE) | 0;\r\n  }\r\n};\r\n","import { bool } from \"./distribution/bool\";\r\nimport { date } from \"./distribution/date\";\r\nimport { dice } from \"./distribution/dice\";\r\nimport { die } from \"./distribution/die\";\r\nimport { hex } from \"./distribution/hex\";\r\nimport { int32 } from \"./distribution/int32\";\r\nimport { int53 } from \"./distribution/int53\";\r\nimport { int53Full } from \"./distribution/int53Full\";\r\nimport { integer } from \"./distribution/integer\";\r\nimport { pick } from \"./distribution/pick\";\r\nimport { real } from \"./distribution/real\";\r\nimport { realZeroToOneExclusive } from \"./distribution/realZeroToOneExclusive\";\r\nimport { realZeroToOneInclusive } from \"./distribution/realZeroToOneInclusive\";\r\nimport { sample } from \"./distribution/sample\";\r\nimport { shuffle } from \"./distribution/shuffle\";\r\nimport { string } from \"./distribution/string\";\r\nimport { uint32 } from \"./distribution/uint32\";\r\nimport { uint53 } from \"./distribution/uint53\";\r\nimport { uint53Full } from \"./distribution/uint53Full\";\r\nimport { uuid4 } from \"./distribution/uuid4\";\r\nimport { nativeMath } from \"./engine/nativeMath\";\r\nimport { Engine } from \"./types\";\r\n\r\n// tslint:disable:unified-signatures\r\n\r\n/**\r\n * A wrapper around an Engine that provides easy-to-use methods for\r\n * producing values based on known distributions\r\n */\r\nexport class Random {\r\n  private readonly engine: Engine;\r\n\r\n  /**\r\n   * Creates a new Random wrapper\r\n   * @param engine The engine to use (defaults to a `Math.random`-based implementation)\r\n   */\r\n  constructor(engine: Engine = nativeMath) {\r\n    this.engine = engine;\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [-0x80000000, 0x7fffffff]\r\n   */\r\n  public int32(): number {\r\n    return int32(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [0, 0xffffffff]\r\n   */\r\n  public uint32(): number {\r\n    return uint32(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [0, 0x1fffffffffffff]\r\n   */\r\n  public uint53(): number {\r\n    return uint53(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [0, 0x20000000000000]\r\n   */\r\n  public uint53Full(): number {\r\n    return uint53Full(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [-0x20000000000000, 0x1fffffffffffff]\r\n   */\r\n  public int53(): number {\r\n    return int53(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [-0x20000000000000, 0x20000000000000]\r\n   */\r\n  public int53Full(): number {\r\n    return int53Full(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [min, max]\r\n   * @param min The minimum integer value, inclusive. No less than -0x20000000000000.\r\n   * @param max The maximum integer value, inclusive. No greater than 0x20000000000000.\r\n   */\r\n  public integer(min: number, max: number): number {\r\n    return integer(min, max)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a floating-point value within [0.0, 1.0]\r\n   */\r\n  public realZeroToOneInclusive(): number {\r\n    return realZeroToOneInclusive(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a floating-point value within [0.0, 1.0)\r\n   */\r\n  public realZeroToOneExclusive(): number {\r\n    return realZeroToOneExclusive(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a floating-point value within [min, max) or [min, max]\r\n   * @param min The minimum floating-point value, inclusive.\r\n   * @param max The maximum floating-point value.\r\n   * @param inclusive If true, `max` will be inclusive.\r\n   */\r\n  public real(min: number, max: number, inclusive: boolean = false): number {\r\n    return real(min, max, inclusive)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a boolean with 50% probability of being true or false\r\n   */\r\n  public bool(): boolean;\r\n  /**\r\n   * Returns a boolean with the provided `percentage` of being true\r\n   * @param percentage A number within [0, 1] of how often the result should be `true`\r\n   */\r\n  public bool(percentage: number): boolean;\r\n  /**\r\n   * Returns a boolean with a probability of `numerator`/`denominator` of being true\r\n   * @param numerator The numerator of the probability\r\n   * @param denominator The denominator of the probability\r\n   */\r\n  public bool(numerator: number, denominator: number): boolean;\r\n  public bool(numerator?: number, denominator?: number): boolean {\r\n    return bool(numerator!, denominator!)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Return a random value within the provided `source` within the sliced\r\n   * bounds of `begin` and `end`.\r\n   * @param source an array of items to pick from\r\n   * @param begin the beginning slice index (defaults to `0`)\r\n   * @param end the ending slice index (defaults to `source.length`)\r\n   */\r\n  public pick<T>(source: ArrayLike<T>, begin?: number, end?: number): T {\r\n    return pick(this.engine, source, begin, end);\r\n  }\r\n\r\n  /**\r\n   * Shuffles an array in-place\r\n   * @param array The array to shuffle\r\n   */\r\n  public shuffle<T>(array: T[]): T[] {\r\n    return shuffle(this.engine, array);\r\n  }\r\n\r\n  /**\r\n   * From the population array, returns an array with sampleSize elements that\r\n   * are randomly chosen without repeats.\r\n   * @param population An array that has items to choose a sample from\r\n   * @param sampleSize The size of the result array\r\n   */\r\n  public sample<T>(population: ArrayLike<T>, sampleSize: number): T[] {\r\n    return sample(this.engine, population, sampleSize);\r\n  }\r\n\r\n  /**\r\n   * Returns a value within [1, sideCount]\r\n   * @param sideCount The number of sides of the die\r\n   */\r\n  public die(sideCount: number): number {\r\n    return die(sideCount)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns an array of length `dieCount` of values within [1, sideCount]\r\n   * @param sideCount The number of sides of each die\r\n   * @param dieCount The number of dice\r\n   */\r\n  public dice(sideCount: number, dieCount: number): number[] {\r\n    return dice(sideCount, dieCount)(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a Universally Unique Identifier Version 4.\r\n   *\r\n   * See http://en.wikipedia.org/wiki/Universally_unique_identifier\r\n   */\r\n  public uuid4(): string {\r\n    return uuid4(this.engine);\r\n  }\r\n\r\n  /**\r\n   * Returns a random string using numbers, uppercase and lowercase letters,\r\n   * `_`, and `-` of length `length`.\r\n   * @param length Length of the result string\r\n   */\r\n  public string(length: number): string;\r\n  /**\r\n   * Returns a random string using the provided string pool as the possible\r\n   * characters to choose from of length `length`.\r\n   * @param length Length of the result string\r\n   */\r\n  public string(length: number, pool: string): string;\r\n  public string(length: number, pool?: string): string {\r\n    return string(pool!)(this.engine, length);\r\n  }\r\n\r\n  /**\r\n   * Returns a random string comprised of numbers or the characters `abcdef`\r\n   * (or `ABCDEF`) of length `length`.\r\n   * @param length Length of the result string\r\n   * @param uppercase Whether the string should use `ABCDEF` instead of `abcdef`\r\n   */\r\n  public hex(length: number, uppercase?: boolean): string {\r\n    return hex(uppercase)(this.engine, length);\r\n  }\r\n\r\n  /**\r\n   * Returns a random `Date` within the inclusive range of [`start`, `end`].\r\n   * @param start The minimum `Date`\r\n   * @param end The maximum `Date`\r\n   */\r\n  public date(start: Date, end: Date): Date {\r\n    return date(start, end)(this.engine);\r\n  }\r\n}\r\n","import { INT32_SIZE } from \"./constants\";\r\n\r\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array\r\n */\r\nconst I32Array: typeof Int32Array = (() => {\r\n  try {\r\n    const buffer = new ArrayBuffer(4);\r\n    const view = new Int32Array(buffer);\r\n    view[0] = INT32_SIZE;\r\n    if (view[0] === -INT32_SIZE) {\r\n      return Int32Array;\r\n    }\r\n  } catch (_) {\r\n    // nothing to do here\r\n  }\r\n  return (Array as unknown) as typeof Int32Array;\r\n})();\r\nexport { I32Array as Int32Array };\r\n","import { Engine } from \"../types\";\r\nimport { Int32Array } from \"../utils/Int32Array\";\r\n\r\nlet data: Int32Array | null = null;\r\nconst COUNT = 128;\r\nlet index = COUNT;\r\n\r\n/**\r\n * An Engine that relies on the globally-available `crypto.getRandomValues`,\r\n * which is typically available in modern browsers.\r\n *\r\n * See https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues\r\n *\r\n * If unavailable or otherwise non-functioning, then `browserCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nexport const browserCrypto: Engine = {\r\n  next() {\r\n    if (index >= COUNT) {\r\n      if (data === null) {\r\n        data = new Int32Array(COUNT);\r\n      }\r\n      crypto.getRandomValues(data);\r\n      index = 0;\r\n    }\r\n    return data![index++] | 0;\r\n  }\r\n};\r\n","import { nativeMath } from \"../engine/nativeMath\";\r\nimport { Engine } from \"../types\";\r\n\r\n/**\r\n * Returns an array of random int32 values, based on current time\r\n * and a random number engine\r\n *\r\n * @param engine an Engine to pull random values from, default `nativeMath`\r\n * @param length the length of the Array, minimum 1, default 16\r\n */\r\nexport function createEntropy(\r\n  engine: Engine = nativeMath,\r\n  length: number = 16\r\n): number[] {\r\n  const array: number[] = [];\r\n  array.push(new Date().getTime() | 0);\r\n  for (let i = 1; i < length; ++i) {\r\n    array[i] = engine.next() | 0;\r\n  }\r\n  return array;\r\n}\r\n","import { UINT32_MAX } from \"./constants\";\r\n\r\n/**\r\n * See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul\r\n */\r\nexport const imul: (a: number, b: number) => number = (() => {\r\n  try {\r\n    if ((Math as any).imul(UINT32_MAX, 5) === -5) {\r\n      return (Math as any).imul;\r\n    }\r\n  } catch (_) {\r\n    // nothing to do here\r\n  }\r\n  const UINT16_MAX = 0xffff;\r\n  return (a: number, b: number) => {\r\n    const ah = (a >>> 16) & UINT16_MAX;\r\n    const al = a & UINT16_MAX;\r\n    const bh = (b >>> 16) & UINT16_MAX;\r\n    const bl = b & UINT16_MAX;\r\n    // the shift by 0 fixes the sign on the high part\r\n    // the final |0 converts the unsigned value into a signed value\r\n    return (al * bl + (((ah * bl + al * bh) << 16) >>> 0)) | 0;\r\n  };\r\n})();\r\n","import { Engine } from \"../types\";\r\nimport { INT32_MAX, INT32_SIZE } from \"../utils/constants\";\r\nimport { createEntropy } from \"../utils/createEntropy\";\r\nimport { imul } from \"../utils/imul\";\r\nimport { Int32Array } from \"../utils/Int32Array\";\r\n\r\nconst ARRAY_SIZE = 624;\r\nconst ARRAY_MAX = ARRAY_SIZE - 1;\r\nconst M = 397;\r\nconst ARRAY_SIZE_MINUS_M = ARRAY_SIZE - M;\r\nconst A = 0x9908b0df;\r\n\r\n/**\r\n * An Engine that is a pseudorandom number generator using the Mersenne\r\n * Twister algorithm based on the prime 2**19937 − 1\r\n *\r\n * See http://en.wikipedia.org/wiki/Mersenne_twister\r\n */\r\nexport class MersenneTwister19937 implements Engine {\r\n  /**\r\n   * Returns a MersenneTwister19937 seeded with an initial int32 value\r\n   * @param initial the initial seed value\r\n   */\r\n  public static seed(initial: number): MersenneTwister19937 {\r\n    return new MersenneTwister19937().seed(initial);\r\n  }\r\n\r\n  /**\r\n   * Returns a MersenneTwister19937 seeded with zero or more int32 values\r\n   * @param source A series of int32 values\r\n   */\r\n  public static seedWithArray(source: ArrayLike<number>): MersenneTwister19937 {\r\n    return new MersenneTwister19937().seedWithArray(source);\r\n  }\r\n\r\n  /**\r\n   * Returns a MersenneTwister19937 seeded with the current time and\r\n   * a series of natively-generated random values\r\n   */\r\n  public static autoSeed(): MersenneTwister19937 {\r\n    return MersenneTwister19937.seedWithArray(createEntropy());\r\n  }\r\n\r\n  private readonly data = new Int32Array(ARRAY_SIZE);\r\n  private index = 0; // integer within [0, 624]\r\n  private uses = 0;\r\n\r\n  /**\r\n   * MersenneTwister19937 should not be instantiated directly.\r\n   * Instead, use the static methods `seed`, `seedWithArray`, or `autoSeed`.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * Returns the next int32 value of the sequence\r\n   */\r\n  public next(): number {\r\n    if ((this.index | 0) >= ARRAY_SIZE) {\r\n      refreshData(this.data);\r\n      this.index = 0;\r\n    }\r\n\r\n    const value = this.data[this.index];\r\n    this.index = (this.index + 1) | 0;\r\n    this.uses += 1;\r\n    return temper(value) | 0;\r\n  }\r\n\r\n  /**\r\n   * Returns the number of times that the Engine has been used.\r\n   *\r\n   * This can be provided to an unused MersenneTwister19937 with the same\r\n   * seed, bringing it to the exact point that was left off.\r\n   */\r\n  public getUseCount(): number {\r\n    return this.uses;\r\n  }\r\n\r\n  /**\r\n   * Discards one or more items from the engine\r\n   * @param count The count of items to discard\r\n   */\r\n  public discard(count: number): this {\r\n    if (count <= 0) {\r\n      return this;\r\n    }\r\n    this.uses += count;\r\n    if ((this.index | 0) >= ARRAY_SIZE) {\r\n      refreshData(this.data);\r\n      this.index = 0;\r\n    }\r\n    while (count + this.index > ARRAY_SIZE) {\r\n      count -= ARRAY_SIZE - this.index;\r\n      refreshData(this.data);\r\n      this.index = 0;\r\n    }\r\n    this.index = (this.index + count) | 0;\r\n    return this;\r\n  }\r\n\r\n  private seed(initial: number): this {\r\n    let previous = 0;\r\n    this.data[0] = previous = initial | 0;\r\n\r\n    for (let i = 1; i < ARRAY_SIZE; i = (i + 1) | 0) {\r\n      this.data[i] = previous =\r\n        (imul(previous ^ (previous >>> 30), 0x6c078965) + i) | 0;\r\n    }\r\n    this.index = ARRAY_SIZE;\r\n    this.uses = 0;\r\n    return this;\r\n  }\r\n\r\n  private seedWithArray(source: ArrayLike<number>): this {\r\n    this.seed(0x012bd6aa);\r\n    seedWithArray(this.data, source);\r\n    return this;\r\n  }\r\n}\r\n\r\nfunction refreshData(data: Int32Array) {\r\n  let k = 0;\r\n  let tmp = 0;\r\n  for (; (k | 0) < ARRAY_SIZE_MINUS_M; k = (k + 1) | 0) {\r\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n    data[k] = data[(k + M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n  }\r\n\r\n  for (; (k | 0) < ARRAY_MAX; k = (k + 1) | 0) {\r\n    tmp = (data[k] & INT32_SIZE) | (data[(k + 1) | 0] & INT32_MAX);\r\n    data[k] =\r\n      data[(k - ARRAY_SIZE_MINUS_M) | 0] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n  }\r\n\r\n  tmp = (data[ARRAY_MAX] & INT32_SIZE) | (data[0] & INT32_MAX);\r\n  data[ARRAY_MAX] = data[M - 1] ^ (tmp >>> 1) ^ (tmp & 0x1 ? A : 0);\r\n}\r\n\r\nfunction temper(value: number) {\r\n  value ^= value >>> 11;\r\n  value ^= (value << 7) & 0x9d2c5680;\r\n  value ^= (value << 15) & 0xefc60000;\r\n  return value ^ (value >>> 18);\r\n}\r\n\r\nfunction seedWithArray(data: Int32Array, source: ArrayLike<number>) {\r\n  let i = 1;\r\n  let j = 0;\r\n  const sourceLength = source.length;\r\n  let k = Math.max(sourceLength, ARRAY_SIZE) | 0;\r\n  let previous = data[0] | 0;\r\n  for (; (k | 0) > 0; --k) {\r\n    data[i] = previous =\r\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x0019660d)) +\r\n        (source[j] | 0) +\r\n        (j | 0)) |\r\n      0;\r\n    i = (i + 1) | 0;\r\n    ++j;\r\n    if ((i | 0) > ARRAY_MAX) {\r\n      data[0] = data[ARRAY_MAX];\r\n      i = 1;\r\n    }\r\n    if (j >= sourceLength) {\r\n      j = 0;\r\n    }\r\n  }\r\n  for (k = ARRAY_MAX; (k | 0) > 0; --k) {\r\n    data[i] = previous =\r\n      ((data[i] ^ imul(previous ^ (previous >>> 30), 0x5d588b65)) - i) | 0;\r\n    i = (i + 1) | 0;\r\n    if ((i | 0) > ARRAY_MAX) {\r\n      data[0] = data[ARRAY_MAX];\r\n      i = 1;\r\n    }\r\n  }\r\n  data[0] = INT32_SIZE;\r\n}\r\n","import { Engine } from \"../types\";\r\n\r\nlet data: Int32Array | null = null;\r\nconst COUNT = 128;\r\nlet index = COUNT;\r\n\r\n/**\r\n * An Engine that relies on the node-available\r\n * `require('crypto').randomBytes`, which has been available since 0.58.\r\n *\r\n * See https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback\r\n *\r\n * If unavailable or otherwise non-functioning, then `nodeCrypto` will\r\n * likely `throw` on the first call to `next()`.\r\n */\r\nexport const nodeCrypto: Engine = {\r\n  next() {\r\n    if (index >= COUNT) {\r\n      data = new Int32Array(\r\n        new Int8Array(require(\"crypto\").randomBytes(4 * COUNT)).buffer\r\n      );\r\n      index = 0;\r\n    }\r\n    return data![index++] | 0;\r\n  }\r\n};\r\n","import { Distribution } from \"../types\";\r\nimport { sliceArray } from \"../utils/sliceArray\";\r\nimport { integer } from \"./integer\";\r\n\r\n/**\r\n * Returns a Distribution to random value within the provided `source`\r\n * within the sliced bounds of `begin` and `end`.\r\n * @param source an array of items to pick from\r\n * @param begin the beginning slice index (defaults to `0`)\r\n * @param end the ending slice index (defaults to `source.length`)\r\n */\r\nexport function picker<T>(\r\n  source: ArrayLike<T>,\r\n  begin?: number,\r\n  end?: number\r\n): Distribution<T> {\r\n  const clone = sliceArray.call(source, begin, end);\r\n  if (clone.length === 0) {\r\n    throw new RangeError(`Cannot pick from a source with no items`);\r\n  }\r\n  const distribution = integer(0, clone.length - 1);\r\n  return engine => clone[distribution(engine)];\r\n}\r\n"],"mappings":"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"}